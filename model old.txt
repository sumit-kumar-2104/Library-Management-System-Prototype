from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import relationship

db = SQLAlchemy()

class users(db.Model):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)
    username = db.Column(db.String, unique=True, nullable=False)
    email = db.Column(db.String, unique=True, nullable=False)
    password = db.Column(db.String, nullable=False)

class Sections(db.Model):
    __tablename__ = "sections"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)
    name = db.Column(db.String, nullable=False)
    date_created = db.Column(db.Date)
    description = db.Column(db.String)
    
    # Establishing a one-to-many relationship with Books
    #books = relationship("Books", backref="section")

class Books(db.Model):
    __tablename__ = "books"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)
    section_id = db.Column(db.Integer, db.ForeignKey("sections.id"), nullable=False)
    name = db.Column(db.String, nullable=False)
    content = db.Column(db.Text)
    author = db.Column(db.String)
    cover = db.Column(db.String)
    date_issued = db.Column(db.Date)
    return_date = db.Column(db.Date)
    # Establishing a many-to-one relationship with Sections
    #section = relationship("Sections", back_populates="books")

class BookRequests(db.Model):
    __tablename__ = "book_requests"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey("books.id"), nullable=False)
    request_date = db.Column(db.Date)
    status = db.Column(db.String)  # You can use an Enum here for more structured status values

class AccessControl(db.Model):
    __tablename__ = "access_control"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, unique=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    book_id = db.Column(db.Integer, db.ForeignKey("books.id"), nullable=False)
    access_type = db.Column(db.String)  # e.g., Read, Write
